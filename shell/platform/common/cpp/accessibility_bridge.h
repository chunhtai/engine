// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef FLUTTER_SHELL_PLATFORM_COMMON_CPP_ACCESSIBILITY_BRIDGE_H_
#define FLUTTER_SHELL_PLATFORM_COMMON_CPP_ACCESSIBILITY_BRIDGE_H_

#include <unordered_map>

#include "flutter/shell/platform/embedder/embedder.h"

#include "flutter/third_party/accessibility/ax/ax_event_generator.h"
#include "flutter/third_party/accessibility/ax/ax_tree.h"
#include "flutter/third_party/accessibility/ax/ax_tree_observer.h"
#include "flutter/third_party/accessibility/ax/platform/ax_platform_node_delegate.h"

#include "flutter_accessibility.h"

namespace ui {

//------------------------------------------------------------------------------
/// Use this class to maintain an accessibility tree. This class consumes
/// semantics updates from the embedder API and produces an accessibility tree
/// in the native format.
///
/// To use this class, you must provide your own implementation of
/// FlutterAccessibility and AccessibilityBridgeDelegate.
class AccessibilityBridge : public AXTreeObserver {
 public:
  //------------------------------------------------------------------------------
  /// Delegate to handle accessibility event and route accessibility action
  /// back to the Flutter framework.
  ///
  /// The accessibility events are generated when accessibility tree changes.
  /// These events must be sent to the native accessibility system through
  /// the native API for the system to pick up the changes
  /// (e.g. NSAccessibilityPostNotification in MacOS).
  ///
  /// The accessibility actions are generated by the native accessibility system
  /// when users interacted with the assistive technologies. Those actions needed
  /// to be sent to the Flutter framework.
  class AccessibilityBridgeDelegate {
   public:
    virtual ~AccessibilityBridgeDelegate() = default;
    //------------------------------------------------------------------------------
    /// @brief      Handle accessibility events generated due to accessibility tree
    ///             changes.
    ///
    /// @param[in]  targeted_event      The object that contains both the generated
    ///                                 event and the event target.
    /// @param[in]  bridge              The pointer to the accessibility bridge that
    ///                                 can be used for querying the accessibility
    ///                                 information at the time the event is fired.
    virtual void OnAccessibilityEvent(
      AXEventGenerator::TargetedEvent targeted_event, AccessibilityBridge* bridge) = 0;

    //------------------------------------------------------------------------------
    /// @brief      Dispatch accessibility action back to the Flutter framework
    ///
    /// @param[in]  target              The semantics node id of the action target.
    /// @param[in]  action              The generated flutter semantics action.
    /// @param[in]  data                Additional data associated with the action.
    /// @param[in]  data_size           The length of the additional data.
    virtual void DispatchAccessibilityAction(uint16_t target,
                                             FlutterSemanticsAction action,
                                             uint8_t* data,
                                             size_t data_size) = 0;
  };
  //------------------------------------------------------------------------------
  /// @brief      Creates a new instance of a accessibility bridge.
  ///
  /// @param[in]  user_data           A custom pointer to the data of your
  ///                                 choice. This pointer can be retrieve later
  ///                                 through GetUserData().
  AccessibilityBridge(std::unique_ptr<AccessibilityBridgeDelegate> delegate,
                      void* user_data);
  ~AccessibilityBridge();

  //------------------------------------------------------------------------------
  /// @brief      Adds a semantics node update to the pending semantics update.
  ///             Calling this method alone will NOT update the semantics tree.
  ///             To flush the pending updates, call the CommitUpdates().
  ///
  /// @param[in]  node           A pointer to the semantics node update.
  void AddFlutterSemanticsNodeUpdate(const FlutterSemanticsNode* node);

  //------------------------------------------------------------------------------
  /// @brief      Adds a custom semantics action update to the pending semantics
  ///             update. Calling this method alone will NOT update the
  ///             semantics tree. To flush the pending updates, call the
  ///             CommitUpdates().
  ///
  /// @param[in]  action           A pointer to the custom semantics action
  /// update.
  void AddFlutterSemanticsCustomActionUpdate(
      const FlutterSemanticsCustomAction* action);

  //------------------------------------------------------------------------------
  /// @brief      Flushes the pending updates and applies them to this
  ///             accessibility bridge.
  void CommitUpdates();

  //------------------------------------------------------------------------------
  /// @brief      Get the underlying AXTree.
  AXTree* GetAXTree();

    //------------------------------------------------------------------------------
  /// @brief      The event generator of this accessibility bridge. It contains
  ///             the pending accessibility events generated as a result of a
  ///             semantics update.
  AXEventGenerator* GetEventGenerator();

  //------------------------------------------------------------------------------
  /// @brief      Get the user data.
  void* GetUserData();

  //------------------------------------------------------------------------------
  /// @brief      Get the accessibility bridge delegate.
  AccessibilityBridgeDelegate* GetDelegate();

  //------------------------------------------------------------------------------
  /// @brief      Get the flutter accessibility node with the given id from this
  ///             accessibility bridge.
  ///
  /// @param[in]  id           The id of the flutter accessibility node you want
  ///                          to retrieve.
  FlutterAccessibility* GetFlutterAccessibilityFromID(int32_t id) const;

  //------------------------------------------------------------------------------
  /// @brief      Update the currently focused flutter accessibility node.
  ///
  /// @param[in]  id           The id of the currently focused flutter
  ///                          accessibility node.
  void SetFocusedNode(int32_t node_id);

  //------------------------------------------------------------------------------
  /// @brief      Get the last focused node.
  int32_t GetLastFocusedNode();

  // AXTreeObserver implementation.
  void OnNodeWillBeDeleted(AXTree* tree, AXNode* node) override;
  void OnSubtreeWillBeDeleted(AXTree* tree, AXNode* node) override;
  void OnNodeCreated(AXTree* tree, AXNode* node) override;
  void OnNodeDeleted(AXTree* tree, int32_t node_id) override;
  void OnNodeReparented(AXTree* tree, AXNode* node) override;
  void OnRoleChanged(AXTree* tree,
                     AXNode* node,
                     ax::mojom::Role old_role,
                     ax::mojom::Role new_role) override;
  void OnAtomicUpdateFinished(
      AXTree* tree,
      bool root_changed,
      const std::vector<AXTreeObserver::Change>& changes) override;

  std::unique_ptr<AccessibilityBridgeDelegate> delegate_;
 private:
  // See FlutterSemanticsNode in embedder.h
  typedef struct {
    int32_t id;
    FlutterSemanticsFlag flags;
    FlutterSemanticsAction actions;
    int32_t text_selection_base;
    int32_t text_selection_extent;
    int32_t scroll_child_count;
    int32_t scroll_index;
    double scroll_position;
    double scroll_extent_max;
    double scroll_extent_min;
    double elevation;
    double thickness;
    std::string label;
    std::string hint;
    std::string value;
    std::string increased_value;
    std::string decreased_value;
    FlutterTextDirection text_direction;
    FlutterRect rect;
    FlutterTransformation transform;
    std::vector<int32_t> children_in_traversal_order;
    std::vector<int32_t> custom_accessibility_actions;
  } SemanticsNode;

  // See FlutterSemanticsCustomAction in embedder.h
  typedef struct {
    int32_t id;
    FlutterSemanticsAction override_action;
    std::string label;
    std::string hint;
  } SemanticsCustomAction;

  std::unordered_map<int32_t, FlutterAccessibility*> id_wrapper_map_;
  std::unique_ptr<AXTree> tree_;
  AXEventGenerator event_generator_;
  std::unordered_map<int32_t, SemanticsNode> _pending_semantics_node_updates;
  std::unordered_map<int32_t, SemanticsCustomAction>
      _pending_semantics_custom_action_updates;
  int32_t last_focused_node_ = AXNode::kInvalidAXID;
  void* user_data_;

  void InitAXTree(const AXTreeUpdate& initial_state);
  void GetSubTreeList(SemanticsNode target, std::vector<SemanticsNode>& result);
  void ConvertFluterUpdate(const SemanticsNode& node,
                           AXTreeUpdate& tree_update);
  void SetRoleFromFlutterUpdate(AXNodeData& node_data,
                                const SemanticsNode& node);
  void SetStateFromFlutterUpdate(AXNodeData& node_data,
                                 const SemanticsNode& node);
  void SetActionsFromFlutterUpdate(AXNodeData& node_data,
                                   const SemanticsNode& node);
  void SetBooleanAttributesFromFlutterUpdate(AXNodeData& node_data,
                                             const SemanticsNode& node);
  void SetIntAttributesFromFlutterUpdate(AXNodeData& node_data,
                                         const SemanticsNode& node);
  void SetIntListAttributesFromFlutterUpdate(AXNodeData& node_data,
                                             const SemanticsNode& node);
  void SetStringListAttributesFromFlutterUpdate(AXNodeData& node_data,
                                                const SemanticsNode& node);
  void SetNameFromFlutterUpdate(AXNodeData& node_data,
                                const SemanticsNode& node);
  void SetValueFromFlutterUpdate(AXNodeData& node_data,
                                 const SemanticsNode& node);
  void SetTreeData(const SemanticsNode& node, AXTreeUpdate& tree_update);
  SemanticsNode FromFlutterSemanticsNode(
      const FlutterSemanticsNode* flutter_node);
  SemanticsCustomAction FromFlutterSemanticsCustomAction(
      const FlutterSemanticsCustomAction* flutter_custom_action);
  BASE_DISALLOW_COPY_AND_ASSIGN(AccessibilityBridge);
};

}  // namespace ui

#endif  // FLUTTER_SHELL_PLATFORM_COMMON_CPP_ACCESSIBILITY_BRIDGE_H_
